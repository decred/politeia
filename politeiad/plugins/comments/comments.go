// Copyright (c) 2020-2021 The Decred developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

// Package comments provides a plugin for adding comments and comment votes to
// records.
package comments

const (
	ID = "comments"

	// Plugin commands
	CmdNew        = "new"        // Create a new comment
	CmdEdit       = "edit"       // Edit a comment
	CmdDel        = "del"        // Del a comment
	CmdVote       = "vote"       // Vote on a comment
	CmdGet        = "get"        // Get specified comments
	CmdGetAll     = "getall"     // Get all comments for a record
	CmdGetVersion = "getversion" // Get specified version of a comment
	CmdCount      = "count"      // Get comments count for a record
	CmdVotes      = "votes"      // Get comment votes
	CmdTimestamps = "timestamps" // Get timestamps

	// TODO make these default settings, not policies
	// PolicyCommentLengthMax is the maximum number of characters
	// accepted for comments.
	PolicyCommentLengthMax = 8000

	// PolicayVoteChangesMax is the maximum number times a user can
	// change their vote on a comment. This prevents a malicious user
	// from being able to spam comment votes.
	PolicyVoteChangesMax = 5
)

// ErrorCodeT represents a error that was caused by the user.
type ErrorCodeT int

const (
	ErrorCodeInvalid            ErrorCodeT = 0
	ErrorCodeTokenInvalid       ErrorCodeT = 1
	ErrorCodePublicKeyInvalid   ErrorCodeT = 2
	ErrorCodeSignatureInvalid   ErrorCodeT = 3
	ErrorCodeCommentTextInvalid ErrorCodeT = 4
	ErrorCodeCommentNotFound    ErrorCodeT = 5
	ErrorCodeUserUnauthorized   ErrorCodeT = 6
	ErrorCodeParentIDInvalid    ErrorCodeT = 7
	ErrorCodeVoteInvalid        ErrorCodeT = 8
	ErrorCodeVoteChangesMax     ErrorCodeT = 9
)

// Comment represent a record comment.
//
// Signature is the client signature of Token+ParentID+Comment.
type Comment struct {
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID if reply
	Comment   string `json:"comment"`   // Comment text
	PublicKey string `json:"publickey"` // Public key used for Signature
	Signature string `json:"signature"` // Client signature
	CommentID uint32 `json:"commentid"` // Comment ID
	Version   uint32 `json:"version"`   // Comment version
	Timestamp int64  `json:"timestamp"` // UNIX timestamp of last edit
	Receipt   string `json:"receipt"`   // Server signature of client signature
	Downvotes uint64 `json:"downvotes"` // Tolal downvotes on comment
	Upvotes   uint64 `json:"upvotes"`   // Total upvotes on comment

	Deleted bool   `json:"deleted,omitempty"` // Comment has been deleted
	Reason  string `json:"reason,omitempty"`  // Reason for deletion

	// Optional fields to be used freely
	ExtraData     string `json:"extradata,omitempty"`
	ExtraDataHint string `json:"extradatahint,omitempty"`
}

// CommentAdd is the structure that is saved to disk when a comment is created
// or edited.
//
// Signature is the client signature of Token+ParentID+Comment.
type CommentAdd struct {
	// Data generated by client
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	Comment   string `json:"comment"`   // Comment
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Client signature

	// Metadata generated by server
	CommentID uint32 `json:"commentid"` // Comment ID
	Version   uint32 `json:"version"`   // Comment version
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
	Receipt   string `json:"receipt"`   // Server signature of client signature

	// Optional fields to be used freely
	ExtraData     string `json:"extradata,omitempty"`
	ExtraDataHint string `json:"extradatahint,omitempty"`
}

// CommentDel is the structure that is saved to disk when a comment is deleted.
// Some additional fields like ParentID and UserID are required to be saved
// since all the CommentAdd records will be deleted and the client needs these
// additional fields to properly display the deleted comment in the comment
// hierarchy.
//
// Signature is the client signature of the Token+CommentID+Reason
type CommentDel struct {
	// Data generated by client
	Token     string `json:"token"`     // Record token
	CommentID uint32 `json:"commentid"` // Comment ID
	Reason    string `json:"reason"`    // Reason for deleting
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Client signature

	// Metadata generated by server
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	UserID    string `json:"userid"`    // Author user ID
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
	Receipt   string `json:"receipt"`   // Server sig of client sig
}

// VoteT represents a comment upvote/downvote.
type VoteT int

const (
	// VoteInvalid is an invalid comment vote.
	VoteInvalid VoteT = 0

	// VoteDownvote represents a comment downvote.
	VoteDownvote VoteT = -1

	// VoteUpvote represents a comment upvote.
	VoteUpvote VoteT = 1
)

// CommentVote is the structure that is saved to disk when a comment is voted
// on.
//
// Signature is the client signature of the Token+CommentID+Vote.
type CommentVote struct {
	// Data generated by client
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	CommentID uint32 `json:"commentid"` // Comment ID
	Vote      VoteT  `json:"vote"`      // Upvote or downvote
	PublicKey string `json:"publickey"` // Public key used for signature
	Signature string `json:"signature"` // Client signature

	// Metadata generated by server
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
	Receipt   string `json:"receipt"`   // Server signature of client signature
}

// New creates a new comment.
//
// The parent ID is used to reply to an existing comment. A parent ID of 0
// indicates that the comment is a base level comment and not a reply commment.
//
// Signature is the client signature of Token+ParentID+Comment.
type New struct {
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	Comment   string `json:"comment"`   // Comment text
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Client signature

	// Optional fields to be used freely
	ExtraData     string `json:"extradata,omitempty"`
	ExtraDataHint string `json:"extradatahint,omitempty"`
}

// NewReply is the reply to the New command.
type NewReply struct {
	Comment Comment `json:"comment"`
}

// Edit edits an existing comment.
//
// Signature is the client signature of Token+ParentID+Comment.
type Edit struct {
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	CommentID uint32 `json:"commentid"` // Comment ID
	Comment   string `json:"comment"`   // Comment text
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Client signature

	// Optional fields to be used freely
	ExtraData     string `json:"extradata,omitempty"`
	ExtraDataHint string `json:"extradatahint,omitempty"`
}

// EditReply is the reply to the Edit command.
type EditReply struct {
	Comment Comment `json:"comment"`
}

// Del permanently deletes all versions of the provided comment.
//
// Signature is the client signature of the Token+CommentID+Reason
type Del struct {
	Token     string `json:"token"`     // Record token
	CommentID uint32 `json:"commentid"` // Comment ID
	Reason    string `json:"reason"`    // Reason for deletion
	PublicKey string `json:"publickey"` // Public key used for signature
	Signature string `json:"signature"` // Client signature
}

// DelReply is the reply to the Del command.
type DelReply struct {
	Comment Comment `json:"comment"`
}

// Vote casts a comment vote (upvote or downvote).
//
// The effect of a new vote on a comment score depends on the previous vote
// from that user ID. Example, a user upvotes a comment that they have already
// upvoted, the resulting vote score is 0 due to the second upvote removing the
// original upvote. The public key cannot be relied on to remain the same for
// each user so a user ID must be included.
//
// Signature is the client signature of the Token+CommentID+Vote.
type Vote struct {
	UserID    string `json:"userid"`    // Unique user ID
	Token     string `json:"token"`     // Record token
	CommentID uint32 `json:"commentid"` // Comment ID
	Vote      VoteT  `json:"vote"`      // Upvote or downvote
	PublicKey string `json:"publickey"` // Public key used for signature
	Signature string `json:"signature"` // Client signature
}

// VoteReply is the reply to the Vote command.
type VoteReply struct {
	Downvotes uint64 `json:"downvotes"` // Tolal downvotes on comment
	Upvotes   uint64 `json:"upvotes"`   // Total upvotes on comment
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
	Receipt   string `json:"receipt"`   // Server signature of client signature
}

// Get returns the latest version of the comments for the provided comment IDs.
// An error is not returned if a comment is not found for one or more of the
// comment IDs. Those entries will simply not be included in the reply.
type Get struct {
	CommentIDs []uint32 `json:"commentids"`
}

// GetReply is the reply to the Get command. The returned map will not include
// an entry for any comment IDs that did not correspond to an actual comment.
// It is the responsibility of the caller to ensure that a comment was returned
// for all of the provided comment IDs.
type GetReply struct {
	Comments map[uint32]Comment `json:"comments"` // [commentID]Comment
}

// GetAll returns the latest version off all comments for a record.
type GetAll struct{}

// GetAllReply is the reply to the GetAll command.
type GetAllReply struct {
	Comments []Comment `json:"comments"`
}

// GetVersion returns a specific version of a comment.
type GetVersion struct {
	CommentID uint32 `json:"commentid"`
	Version   uint32 `json:"version"`
}

// GetVersionReply is the reply to the GetVersion command.
type GetVersionReply struct {
	Comment Comment `json:"comment"`
}

// Count returns the comments count for a record.
type Count struct{}

// CountReply is the reply to the Count command.
type CountReply struct {
	Count uint32 `json:"count"`
}

// Votes returns the comment votes that meet the provided filtering criteria.
type Votes struct {
	UserID string `json:"userid"`
}

// VotesReply is the reply to the Votes command.
type VotesReply struct {
	Votes []CommentVote `json:"votes"`
}

// Proof contains an inclusion proof for the digest in the merkle root. The
// ExtraData field is used by certain types of proofs to include additional
// data that is required to validate the proof.
type Proof struct {
	Type       string   `json:"type"`
	Digest     string   `json:"digest"`
	MerkleRoot string   `json:"merkleroot"`
	MerklePath []string `json:"merklepath"`
	ExtraData  string   `json:"extradata"` // JSON encoded
}

// Timestamp contains all of the data required to verify that a piece of data
// was timestamped onto the decred blockchain.
//
// All digests are hex encoded SHA256 digests. The merkle root can be found in
// the OP_RETURN of the specified DCR transaction.
//
// TxID, MerkleRoot, and Proofs will only be populated once the merkle root has
// been included in a DCR tx and the tx has 6 confirmations. The Data field
// will not be populated if the data has been censored.
type Timestamp struct {
	Data       string  `json:"data"` // JSON encoded
	Digest     string  `json:"digest"`
	TxID       string  `json:"txid"`
	MerkleRoot string  `json:"merkleroot"`
	Proofs     []Proof `json:"proofs"`
}

// Timestamps requests the timestamps for a record's comments. If no comment
// IDs are provided then timestamps for all comments made on the record will
// be returned. If IncludeVotes is set to true then the timestamps for the
// comment votes will also be returned. If a provided comment ID does not
// exist then it will not be included in the reply.
type Timestamps struct {
	CommentIDs   []uint32 `json:"commentids,omitempty"`
	IncludeVotes bool     `json:"includevotes,omitempty"`
}

// TimestampsReply is the reply to the timestamps command.
type TimestampsReply struct {
	Comments map[uint32][]Timestamp `json:"comments"`
	Votes    map[uint32][]Timestamp `json:"votes"`
}
