package comments

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/decred/politeia/politeiad/api/v1/identity"
	"github.com/decred/politeia/util"
)

type ErrorStatusT int

const (
	Version = "1"
	ID      = "comments"

	// Plugin commands
	CmdNew    = "new"    // Create a new comment
	CmdGet    = "get"    // Get comments
	CmdEdit   = "edit"   // Edit a comment
	CmdDel    = "del"    // Delete a comment
	CmdExists = "exists" // Does a comment exist
	CmdVote   = "vote"   // Vote on a comment
	CmdCensor = "censor" // Censor a comment
	CmdCount  = "count"  // Get comments count
	CmdProofs = "proofs" // Get comment proofs

	// Error status codes
	ErrorStatusInvalid          ErrorStatusT = 0
	ErrorStatusPublicKeyInvalid ErrorStatusT = 1
	ErrorStatusSignatureInvalid ErrorStatusT = 2
	ErrorStatusRecordNotFound   ErrorStatusT = 3
	ErrorStatusCommentNotFound  ErrorStatusT = 4
)

var (
	// Human readable error messages
	ErrorStatus = map[ErrorStatusT]string{
		ErrorStatusPublicKeyInvalid: "invalid public key",
		ErrorStatusSignatureInvalid: "invalid signature",
		ErrorStatusRecordNotFound:   "record not found",
		ErrorStatusCommentNotFound:  "comment not found",
	}
)

// PluginError is emitted when input provided to a plugin command is invalid.
type PluginError struct {
	ErrorCode    ErrorStatusT
	ErrorContext []string
}

// Error satisfies the error interface.
func (e PluginError) Error() string {
	return fmt.Sprintf("plugin error code: %v", e.ErrorCode)
}

// Comment represent a user submitted comment and includes both the user
// generated comment data and the server generated metadata.
type Comment struct {
	// Data generated by client
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	Comment   string `json:"comment"`   // Comment
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Signature of Token+ParentID+Comment

	// Metadata generated by server
	CommentID uint32 `json:"commentid"` // Comment ID
	Version   uint32 `json:"version"`   // Comment version
	Receipt   string `json:"receipt"`   // Server signature of client signature
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
	Score     int32  `json:"score"`     // Vote score
	Deleted   bool   `json:"deleted"`   // Comment has been deleted by author
	Censored  bool   `json:"censored"`  // Comment has been censored by admin
}

func VerifyCommentSignature(signature, pubkey, token string, parentID uint32, comment string) error {
	sig, err := util.ConvertSignature(signature)
	if err != nil {
		return PluginError{
			ErrorCode:    ErrorStatusSignatureInvalid,
			ErrorContext: []string{err.Error()},
		}
	}
	b, err := hex.DecodeString(pubkey)
	if err != nil {
		return PluginError{
			ErrorCode:    ErrorStatusPublicKeyInvalid,
			ErrorContext: []string{"key is not hex"},
		}
	}
	pk, err := identity.PublicIdentityFromBytes(b)
	if err != nil {
		return PluginError{
			ErrorCode:    ErrorStatusPublicKeyInvalid,
			ErrorContext: []string{err.Error()},
		}
	}
	msg := token + strconv.FormatUint(uint64(parentID), 10) + comment
	if !pk.VerifyMessage([]byte(msg), sig) {
		return PluginError{
			ErrorCode:    ErrorStatusSignatureInvalid,
			ErrorContext: []string{err.Error()},
		}
	}
	return nil
}

type New struct {
	Token     string `json:"token"`     // Record token
	ParentID  uint32 `json:"parentid"`  // Parent comment ID
	Comment   string `json:"comment"`   // Comment
	PublicKey string `json:"publickey"` // Pubkey used for Signature
	Signature string `json:"signature"` // Signature of Token+ParentID+Comment
}

// EncodeNew encodes a New into a JSON byte slice.
func EncodeNew(n New) ([]byte, error) {
	return json.Marshal(n)
}

// DecodeNew decodes a JSON byte slice into a New.
func DecodeNew(b []byte) (*New, error) {
	var n New
	err := json.Unmarshal(b, &n)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// NewReply is the reply to the New command.
type NewReply struct {
	CommentID string `json:"commentid"` // Comment ID
	Receipt   string `json:"receipt"`   // Server signature of comment signature
	Timestamp int64  `json:"timestamp"` // Received UNIX timestamp
}

// EncodeNew encodes a NewReply into a JSON byte slice.
func EncodeNewReply(r NewReply) ([]byte, error) {
	return json.Marshal(r)
}

// DecodeNew decodes a JSON byte slice into a NewReply.
func DecodeNewReply(b []byte) (*NewReply, error) {
	var r NewReply
	err := json.Unmarshal(b, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}
